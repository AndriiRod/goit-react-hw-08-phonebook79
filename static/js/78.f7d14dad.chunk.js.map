{"version":3,"file":"static/js/78.f7d14dad.chunk.js","mappings":"uSAiBA,GAfeA,EAAAA,EAAAA,IAAO,CACpBC,MAAMC,EAAAA,EAAAA,MACHC,QACC,yHACA,0IAEDC,SAAS,gBACZC,QAAQH,EAAAA,EAAAA,MACLC,QACC,+EACA,gGAEDC,SAAS,0B,mBCZDE,EAAOC,EAAAA,EAAAA,KAAH,0FAMJC,EAAQD,EAAAA,EAAAA,MAAH,oOAcLE,EAAQF,EAAAA,EAAAA,MAAH,gVAqBLG,EAAUH,EAAAA,EAAAA,OAAH,sOAcPI,EAAeJ,EAAAA,EAAAA,IAAH,6LAUZK,EAAYL,EAAAA,EAAAA,IAAH,+C,UCqBtB,EApEuB,WACrB,IAAMM,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IACvBC,GAAWC,EAAAA,EAAAA,MAEjB,GAKIC,EAAAA,EAAAA,IAAQ,CACVC,cAAe,CACblB,KAAM,GACNI,OAAQ,IAEVe,UAAUC,EAAAA,EAAAA,GAAYC,GACtBC,KAAM,WAVNC,EADF,EACEA,SACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,MACaC,EAJf,EAIEC,UAAaD,OASTE,GAAcC,EAAAA,EAAAA,IAAO,GACrBC,GAAgBD,EAAAA,EAAAA,IAAO,GAkB7B,OACE,UAACxB,EAAD,CAAM0B,SAAUP,GAjBO,SAAAQ,GACvB,IAAQhC,EAASgC,EAAThC,KACQY,EAASqB,MACvB,SAAAC,GAAI,OAAIA,EAAKlC,KAAKmC,gBAAkBnC,EAAKmC,aAArC,IAGJC,EAAAA,GAAAA,KAAA,UACKpC,EAAKqC,OAAO,GAAGC,cAAgBtC,EAAKuC,MAAM,GAD/C,6BAKFH,EAAAA,GAAAA,QAAc,uBACdrB,GAASyB,EAAAA,EAAAA,IAAYR,IACrBP,IACD,IAGC,WACE,UAACd,EAAD,YACE,SAACJ,EAAD,CAAOkC,QAASb,EAAac,MAAOhB,EAAO1B,KAA3C,SAAiD,UAGjD,SAACQ,GAAD,gBACEmC,GAAIf,EACJgB,KAAK,QACDrB,EAAS,OAAQ,CAAEpB,UAAU,KAHnC,IAIEuC,MAAOhB,EAAO1B,WAGjB0B,EAAO1B,OAAQ,SAACU,EAAD,UAAegB,EAAO1B,KAAK6C,WAE3C,UAAClC,EAAD,YACE,SAACJ,EAAD,CAAOkC,QAASX,EAAeY,MAAOhB,EAAOtB,OAA7C,SAAqD,YAGrD,SAACI,GAAD,gBACEmC,GAAIb,EACJc,KAAK,OACDrB,EAAS,SAAU,CAAEpB,UAAU,KAHrC,IAIEuC,MAAOhB,EAAOtB,aAGjBsB,EAAOtB,SAAU,SAACM,EAAD,UAAegB,EAAOtB,OAAOyC,WAC/C,SAACpC,EAAD,CAASmC,KAAK,SAAd,SAAuB,kBAG5B,EChFD,EAJmB,WACjB,OAAO,SAAC,EAAD,GACR,C","sources":["validation/schema.js","components/AddContactForm/AddContactForm.styled.jsx","components/AddContactForm/AddContactForm.jsx","pages/AddContact.jsx"],"sourcesContent":["import { object, string } from 'yup';\n\nconst schema = object({\n  name: string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('Enter a name'),\n  number: string()\n    .matches(\n      /^\\+?\\d{1,3}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Enter a phone number'),\n});\n\nexport default schema;\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  margin-top: 40px;\n`;\n\nexport const Label = styled.label`\n  position: absolute;\n  top: -6px;\n  left: 15px;\n\n  background-color: #ffffff;\n  font-weight: 400;\n  font-size: 12px;\n  line-height: 1;\n  letter-spacing: 0.018px;\n\n  color: rgba(0, 0, 0, 0.6);\n`;\n\nexport const Input = styled.input`\n  width: 100%;\n  height: 40px;\n  padding: 16px 14px;\n\n  background-color: #ffffff;\n  border: 2px solid rgba(0, 0, 0, 0.38);\n  border-radius: 8px;\n\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 1.18;\n\n  margin-bottom: 20px;\n\n  &:focus {\n    outline: none;\n    border-color: #3f9bfc;\n  }\n`;\n\nexport const FormBtn = styled.button`\n  font-family: inherit;\n  font-size: 14px;\n  line-height: normal;\n  font-weight: 400;\n\n  padding: 9px 44px;\n  background-color: #3f9bfc;\n  color: #ffffff;\n  border: none;\n\n  border-radius: 10px;\n`;\n\nexport const ErrorMessage = styled.div`\n  font-size: 12px;\n  padding: 10px;\n  border: 1px solid #dc143c;\n  border-radius: 10px;\n  margin-bottom: 20px;\n  background-color: #f08080;\n  color: #e0ffff;\n`;\n\nexport const InputWrap = styled.div`\n  position: relative;\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { toast } from 'react-toastify';\n\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContacts } from 'redux/contacts/operations';\n\nimport schema from '../../validation/schema';\n\nimport {\n  Form,\n  Label,\n  Input,\n  FormBtn,\n  ErrorMessage,\n  InputWrap,\n} from './AddContactForm.styled';\n\nconst AddContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    defaultValues: {\n      name: '',\n      number: '',\n    },\n    resolver: yupResolver(schema),\n    mode: 'onBlur',\n  });\n  const inputNameId = nanoid(6);\n  const inputNumberId = nanoid(6);\n\n  const handleSubmitForm = data => {\n    const { name } = data;\n    const matches = contacts.find(\n      item => item.name.toLowerCase() === name.toLowerCase()\n    );\n    if (matches) {\n      toast.info(\n        `${name.charAt(0).toUpperCase() + name.slice(1)} is already in contacts`\n      );\n      return;\n    }\n    toast.success('New contact added!!');\n    dispatch(addContacts(data));\n    reset();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit(handleSubmitForm)}>\n      <InputWrap>\n        <Label htmlFor={inputNameId} error={errors.name}>\n          Name\n        </Label>\n        <Input\n          id={inputNameId}\n          type=\"text\"\n          {...register('name', { required: true })}\n          error={errors.name}\n        />\n      </InputWrap>\n      {errors.name && <ErrorMessage>{errors.name.message}</ErrorMessage>}\n\n      <InputWrap>\n        <Label htmlFor={inputNumberId} error={errors.number}>\n          Number\n        </Label>\n        <Input\n          id={inputNumberId}\n          type=\"tel\"\n          {...register('number', { required: true })}\n          error={errors.number}\n        />\n      </InputWrap>\n      {errors.number && <ErrorMessage>{errors.number.message}</ErrorMessage>}\n      <FormBtn type=\"submit\">Add contact</FormBtn>\n    </Form>\n  );\n};\n\nexport default AddContactForm;\n","import AddContactForm from 'components/AddContactForm/';\n\nconst AddContact = () => {\n  return <AddContactForm />;\n};\n\nexport default AddContact;\n"],"names":["object","name","string","matches","required","number","Form","styled","Label","Input","FormBtn","ErrorMessage","InputWrap","contacts","useSelector","selectContacts","dispatch","useDispatch","useForm","defaultValues","resolver","yupResolver","schema","mode","register","handleSubmit","reset","errors","formState","inputNameId","nanoid","inputNumberId","onSubmit","data","find","item","toLowerCase","toast","charAt","toUpperCase","slice","addContacts","htmlFor","error","id","type","message"],"sourceRoot":""}